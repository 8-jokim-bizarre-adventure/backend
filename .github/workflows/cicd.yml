name: CI/CD

on:
  push:
    branches: [ release ]
  pull_request:
    types: [ closed ]
    branches: [ release ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-  

      - name: Make application.yaml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yaml
          echo '${{ secrets.APPLICATION_PROD }}' > ./application.yaml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker build & push to production
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/sivillage-app .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sivillage-app

      - name: Get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add GitHub IP to AWS Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2 using PEM Key
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          timeout: 60s
          script: |
            echo "Stopping existing application..."
            sudo docker stop sivillage-app || true
            sudo docker rm sivillage-app || true

            echo "Running MySQL container..."
            sudo docker start sivillage-db || echo "MySQL container start failed."

            echo "Pulling latest image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sivillage-app:latest

            echo "Running new container..."
            sudo docker run -d --name sivillage-app -p ${{ secrets.EC2_APPLICATION_PORT }}:${{ secrets.EC2_APPLICATION_PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/sivillage-app:latest

            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f

      - name: Remove GitHub IP from AWS Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32